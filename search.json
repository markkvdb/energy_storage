[
  {
    "objectID": "optimal_dispatch.html",
    "href": "optimal_dispatch.html",
    "title": "optimal_dispatch",
    "section": "",
    "text": "Electricity is sold on the day-ahead market. Sellers and buyers submit their bids for the coming day before noon on a given day. A seller of electricity sells energy for each hour of the next day and receives a compensation for that based on the day-ahead (spot) price of that given day. If there’s a mismatch between the amount of electricity that the seller sold and what the seller actually delivered, then the seller receives or pays a compensation based on the imbalance price. The seller receives a compensation if the seller produced more energy than what was sold and pays a compensation in case more energy was sold than delivered.\nTraditional power plants are controllable (to different degrees) whereas photovoltaïc (and wind) assets are mostly dependent on weather conditions (and therefore uncontrollable). This uncontrollability can bring significant uncertainty to the revenue of these renewable assets.\nIn case of photovoltaïc plants, there are two main issues contributing to financial risk. First, many European countries now have a significant portion of their total energy production sourced from photovoltaïc assets (&gt;10%). As a result, moments of high photovoltaïc energy production increasingly result in downward pressure on the day-ahead prices due to higher energy supply resulting in lower revenues. Second, renewable energy, unlike traditional power plants, are mostly uncontrollable since energy production is driven by weather conditions. Because of this, estimating the energy to be sold on the day-ahead market has higher risks of large imbalance costs, since production is driven by uncontrollable factors and therefore has to be forecasted.\nOne solution to potentially reduce the finanical risks from the two before-mentioned issues is to combine photovoltaïc assets with energy storage solutions to have more control on when energy is dispatched to the electricity grid. Energy storage could mitigate the risk of the lower prices on hours of high production by dispatching the energy to the grid on hours with higher prices. Batteries could as well mititage some of the incurred imbalance costs by rebalancing the energy returned to the grid such that the sold energy at each hour more closely matches the actual energy returned to the grid.\nIn Section 2, we will discuss how batteries could help with dispatching energy to the grid to sell this energy at higher prices. In Section 3, we introduce an extension to the analysis in Section 2 by investigating the higher inherit imbalance risks for photovoltaïc assets.",
    "crumbs": [
      "optimal_dispatch"
    ]
  },
  {
    "objectID": "optimal_dispatch.html#introduction",
    "href": "optimal_dispatch.html#introduction",
    "title": "optimal_dispatch",
    "section": "",
    "text": "Electricity is sold on the day-ahead market. Sellers and buyers submit their bids for the coming day before noon on a given day. A seller of electricity sells energy for each hour of the next day and receives a compensation for that based on the day-ahead (spot) price of that given day. If there’s a mismatch between the amount of electricity that the seller sold and what the seller actually delivered, then the seller receives or pays a compensation based on the imbalance price. The seller receives a compensation if the seller produced more energy than what was sold and pays a compensation in case more energy was sold than delivered.\nTraditional power plants are controllable (to different degrees) whereas photovoltaïc (and wind) assets are mostly dependent on weather conditions (and therefore uncontrollable). This uncontrollability can bring significant uncertainty to the revenue of these renewable assets.\nIn case of photovoltaïc plants, there are two main issues contributing to financial risk. First, many European countries now have a significant portion of their total energy production sourced from photovoltaïc assets (&gt;10%). As a result, moments of high photovoltaïc energy production increasingly result in downward pressure on the day-ahead prices due to higher energy supply resulting in lower revenues. Second, renewable energy, unlike traditional power plants, are mostly uncontrollable since energy production is driven by weather conditions. Because of this, estimating the energy to be sold on the day-ahead market has higher risks of large imbalance costs, since production is driven by uncontrollable factors and therefore has to be forecasted.\nOne solution to potentially reduce the finanical risks from the two before-mentioned issues is to combine photovoltaïc assets with energy storage solutions to have more control on when energy is dispatched to the electricity grid. Energy storage could mitigate the risk of the lower prices on hours of high production by dispatching the energy to the grid on hours with higher prices. Batteries could as well mititage some of the incurred imbalance costs by rebalancing the energy returned to the grid such that the sold energy at each hour more closely matches the actual energy returned to the grid.\nIn Section 2, we will discuss how batteries could help with dispatching energy to the grid to sell this energy at higher prices. In Section 3, we introduce an extension to the analysis in Section 2 by investigating the higher inherit imbalance risks for photovoltaïc assets.",
    "crumbs": [
      "optimal_dispatch"
    ]
  },
  {
    "objectID": "optimal_dispatch.html#optimal-energy-dispatching-using-battery-storage",
    "href": "optimal_dispatch.html#optimal-energy-dispatching-using-battery-storage",
    "title": "optimal_dispatch",
    "section": "2. Optimal Energy Dispatching using Battery Storage",
    "text": "2. Optimal Energy Dispatching using Battery Storage\nBefore trying to optimise revenues, let’s start by defining what the revenue is supposed to look like. For any given day, let \\(P_t\\) be the day-ahead price in €/kWh at hour \\(t\\) and \\(V_t\\) the ingested production in kW at time \\(t\\). The revenue is then defined as:\n\\[\n    R = \\sum_{t=0}^{23} P_t V_t\n\\]\nThe main observation here is that we have some control over \\(V_t\\) so that we can try to ingest energy to the grid at hours with higher prices.\n\nDay-ahead prices\nThe next figure shows the normalised prices over the last two years together:\n\ndf_price = get_spot_price() / 1000.0  # prices in €/kWh instead of €/GWh\n\n\ndf_price_normal = df_price.groupby(pd.Grouper(freq=\"1d\"), group_keys=False).apply(\n    lambda d: d / d.mean()\n)\n\n# create wide for boxplot and remove duplicate date, hour tuples due to change to winter time\ndf_price_normal = df_price_normal.to_frame().assign(\n    hour=lambda d: d.index.hour, date=lambda d: d.index.date\n)\ndf_price_normal = df_price_normal[~df_price_normal[[\"hour\", \"date\"]].duplicated()]\n\ndf_price_normal.pivot(index=\"date\", columns=\"hour\", values=\"spot_price\").plot.box()\nplt.show()\n\n\n\n\n\n\n\n\nIt’s hard to get a good sense of the daily distribution since we have a few hours with extremely large values – 200 means that the price is 200 times higher than the average of that day! However, note that extremely low prices happen around noon whereas the extremely high prices happen during during the evening.\nThe following boxplot contains the same data without prices that are 10 times higher/lower than the average price\n\ndf_price_normal[df_price_normal[\"spot_price\"].abs() &lt; 10].pivot(\n    index=\"date\", columns=\"hour\", values=\"spot_price\"\n).plot.box()\nplt.show()\n\n\n\n\n\n\n\n\nUnsurprisingly, electricity prices are higher at hours of high demand (morning and evening) and lower during off-peak hours (afternoon and night). Another reason for relatively low prices during the afternoon is because photovoltaic plants produce the most during the afternoon.\n\nPeak / Off-peak Spread\nBecause of the increasing share of photovoltaïc generation, the spread between the prices for peak hours and off-peak hours is increasing over time.\n\nsource\n\n\n\nis_peak\n\n is_peak (hour:int)\n\nReturns True if time_stamp is a peak hour, else False.\n\ndf_peak_spread = (\n    df_price.copy()\n    .to_frame(\"spot_price\")\n    .assign(peak=lambda d: d.index.hour.map(is_peak))\n    .groupby(pd.Grouper(freq=\"1d\"))\n    .apply(\n        lambda d: d.loc[d[\"peak\"], \"spot_price\"].mean()\n        / d.loc[~d[\"peak\"], \"spot_price\"].mean()\n    )\n)\ndf_peak_spread.index = df_peak_spread.index.date\nax = df_peak_spread.plot(title=\"Peak spread\", ylim=(1, 2.0), figsize=(10, 3))\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nProduction\nThe hourly distribution of our photovoltaic plant looks as follows:\n\ndf_prod = get_production()\n\ndf_prod_help = df_prod.to_frame(\"prod\").assign(\n    hour=lambda d: d.index.hour, date=lambda d: d.index.date\n)\ndf_prod_help = df_prod_help.loc[~df_prod_help[[\"date\", \"hour\"]].duplicated()]\n\n\nax = df_prod_help.pivot(index=\"date\", columns=\"hour\", values=\"prod\").plot.box()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nOn-peak vs. Local Revenue\nTo get an indication of the “lost” revenue due to producing energy at hours with low prices (afternoon) we can compare the on-peak revenue with the local revenue. We define the on-peak volume as the local volume but redistributed over the on-peak hours. For this we define a simple helper function to redistribute the volume:\n\nsource\n\n\nredistribute_daily_production\n\n redistribute_daily_production (df:pandas.core.series.Series,\n                                daily_distribution:list[str])\n\n\n\n\n\nType\nDetails\n\n\n\n\ndf\nSeries\nproduction data\n\n\ndaily_distribution\nlist\ndistribution at each our\n\n\nReturns\nDataFrame\n\n\n\n\n\npeak_dist = [is_peak(hour) for hour in range(24)]\n\ndf_prod_peak = redistribute_daily_production(df_prod, daily_distribution=peak_dist)\n\nLocal price:\n\ndf_revenue_local = (\n    df_price.to_frame()\n    .merge(df_prod, left_index=True, right_index=True)\n    .assign(revenue=lambda d: d[\"prod\"] * d[\"spot_price\"])\n)\ndf_price_local = df_revenue_local.groupby(\n    pd.Grouper(freq=\"MS\"), group_keys=False\n).apply(lambda d: d[\"revenue\"].sum() / d[\"prod\"].sum())\n\nLet’s compare the local and the baseload price…\n\ndf_price_baseload = df_price.groupby(pd.Grouper(freq=\"MS\"), group_keys=False).mean()\n\n\ndf_prices = df_price_baseload.to_frame(\"baseload\").merge(\n    df_price_local.to_frame(\"local\"), left_index=True, right_index=True\n)\nax = df_prices.plot(style=\"-o\", title=\"Monthly average price (€/kWh)\")\nplt.show()\n\n\n\n\n\n\n\n\nThe local price is already significantly lower than the baseload price. Let’s get some first insights in the potential extra revenue from dispatching our local generation on peak hours.\n\ndf_revenue_peak = (\n    df_price.to_frame()\n    .merge(df_prod_peak, left_index=True, right_index=True)\n    .assign(revenue=lambda d: d[\"prod\"] * d[\"spot_price\"])\n)\ndf_price_peak = df_revenue_peak.groupby(pd.Grouper(freq=\"MS\"), group_keys=False).apply(\n    lambda d: d[\"revenue\"].sum() / d[\"prod\"].sum()\n)\n\n\ndf_prices = df_prices.merge(\n    df_price_peak.to_frame(\"peak\"), left_index=True, right_index=True\n)\nax = df_prices.plot(style=\"-o\", title=\"Monthly average price (€/kWh)\")\nplt.show()\n\n\n\n\n\n\n\n\nThe previous analysis focused on the average monthly price. A more important metric for developers is total revenue over a period.\nSince solar plants produce more during summer months, the cannibalisation effect is higher during these months. That implies that the potential revenue benefits of rebalancing production are higher for the production-weighted total revenue over the entire two year period. Let’s crank these numbers…\n\ndf_prod_monthly = (\n    df_prod.groupby(pd.Grouper(freq=\"MS\"), group_keys=False).sum().to_frame(\"prod\")\n)\n\n\ndf_revenue_comparison = (\n    df_prices.reset_index()\n    .melt(id_vars=\"time\", var_name=\"price_type\", value_name=\"price\")\n    .set_index(\"time\")\n    .merge(df_prod_monthly, left_index=True, right_index=True)\n    .assign(revenue=lambda d: d[\"price\"] * d[\"prod\"])\n    .groupby(\"price_type\")\n    .sum()[[\"revenue\"]]\n)\n\nThis results in the following table. It seems that “optimally” rebalancing the production can lead to a ~15% increase in revenue.\n\nax = (100 * df_revenue_comparison / df_revenue_comparison.T[\"local\"]).plot.bar(\n    title=\"Revenue for different production dispatch regimes\"\n)\nplt.show()",
    "crumbs": [
      "optimal_dispatch"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "data",
    "section": "",
    "text": "This project uses two years of data for a French photovoltaïc site between the period August 2020 up to August 22. The main sources of data are French electricity spot prices and the production load curve for the site.\nThe spot price data is collected from ENTSOE and can be found under the data folder. The load_spot_price function is a wrapper around the import call to directly use the spot price data.\n\nsource\n\nget_spot_price\n\n get_spot_price ()\n\nLoad french spot price data.\nLet’s load the data and see what’s inside…\n\ndf_spot_price = get_spot_price()\n\n\ndf_spot_price.to_frame().head()\n\n\n\n\n\n\n\n\nspot_price\n\n\ntime\n\n\n\n\n\n2020-08-01 00:00:00+02:00\n37.96\n\n\n2020-08-01 01:00:00+02:00\n32.40\n\n\n2020-08-01 02:00:00+02:00\n31.01\n\n\n2020-08-01 03:00:00+02:00\n28.29\n\n\n2020-08-01 04:00:00+02:00\n27.45\n\n\n\n\n\n\n\nEurope truly is in a unique situation regarding its electricity market as the following price time series suggests:\n\ndf_spot_price.clip(upper=1000).plot()\n\n\n\n\n\n\n\n\nMake sure that we will always get this dataset without missing data.\n\ntest_eq(df_spot_price.shape, (17520,))\ntest_eq(df_spot_price.isna().any(), False)\n\n\nsource\n\n\nget_production\n\n get_production (site_id:int=1)\n\nGet production data for site site_id.\n\ndf_production = get_production()\n\nLet’s see what the production looks like over the full two year period…\n\ndf_production.plot()\n\n\n\n\n\n\n\n\nAs might seem obvious, the production during the winter months is significantly lower than the summer months.",
    "crumbs": [
      "data"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "energy_storage",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "energy_storage"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "energy_storage",
    "section": "Install",
    "text": "Install\npip install energy_storage",
    "crumbs": [
      "energy_storage"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "energy_storage",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "energy_storage"
    ]
  }
]